@page "/MineSweeper"
@rendermode InteractiveServer 

<PageTitle>MineSweeper</PageTitle>

<h1>MineSweeper.</h1>

<hr />

<div class="GameWindow"> 

   <div class="GameHeader">

		<div class="Flag-Readout"> Flags Left <span class="Flag-Readout-Box">@mineField.numberOfFlags</span></div>
		<button class="Reset"  @onclick="ResetNewGame">@GetGameStateIcon()</button> 
		<div class="SpairRightDiv">..</div> 

   </div>
   
   <div class="GameDisplay">
		@for (int x = 0; x < mineField.cellData.GetLength(0); x++)
		{
			<div>
	        @for (int y = 0; y < mineField.cellData.GetLength(1); y++)
			{
					var gridReffX = x;
					var gridReffY = y;

					<button class="@GetCellCSS(gridReffX, gridReffY)"
							@onclick=" e => mineField.HandleLeftClickEvent(gridReffX, gridReffY)"
							@oncontextmenu:preventDefault="true" @oncontextmenu="e => mineField.HandleRightClickEvent(gridReffX, gridReffY)">
				            @GetCellIcon(gridReffX, gridReffY)
					</button>
					
			}
			</div>
		}
	</div>
	
   <div class="Footer">@GetGameOverText()</div>

</div>

<hr />

@code {

	GameSettings settings;
	MineField mineField;

	protected override void OnInitialized()
	{
		settings = new GameSettings();
		settings.XLength = 10;
		settings.YHeight = 5;
		settings.NumberOfMines = 12;

		mineField = new MineField(settings);
	}
	public void ResetNewGame()
	{
		mineField = new MineField(settings);
	}
	private string GetCellIcon(int x, int y)
	{
		if (mineField.cellData[x, y].State == CellState.Hidden)
		{ return " "; }
		else if (mineField.cellData[x, y].State == CellState.Flagged)
		{ return "🚩"; }
		else if (mineField.cellData[x, y].DoesCellContainsAMine)
		{ return "💥"; }
		else if (mineField.cellData[x, y].State == CellState.UnHidden && mineField.cellData[x, y].AdjacentMineCount > 0)
		{ return mineField.cellData[x, y].AdjacentMineCount.ToString();  }
		else{ return " "; }

	}
	private string GetCellCSS(int x, int y)
	{
		if (mineField.cellData[x, y].State == CellState.Hidden)
		{ return "Cell-Hidden"; }
		else if (mineField.cellData[x, y].State == CellState.Flagged)
		{ return "Cell-Flagged"; }
		else if (mineField.cellData[x, y].DoesCellContainsAMine)
		{ return "Cell-Mine"; }
		else if (mineField.cellData[x, y].State == CellState.UnHidden && mineField.cellData[x, y].AdjacentMineCount > 0)
		{ return "Cell-MineData"; }
		else { return "Cell-MineData-Zero"; }

	}
	private string GetGameStateIcon()
	{ 
		if (mineField.IsGameStillRunning) { return "😐"; }
		else { return "🤯"; }
	}
	private string? GetGameOverText()
	{
		if( !mineField.IsGameStillRunning){ return "Game Over!"; }
		else{ return null; }
	}





}
